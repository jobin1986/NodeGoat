# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build --if-present
    - run: npm test

    
    - name: Nexus IQ for GitHub Actions
  # You may pin to the exact commit or the version.
  # uses: sonatype-nexus-community/iq-github-action@ef2fae57de0888b50cedf3c9e1c2886bf3e5f21a
    - uses: sonatype-nexus-community/iq-github-action@1.1.1
      with:
    # Nexus IQ Server URL
        serverUrl: https://iq.jbernie.eu.ngrok.io/
    # Username to connect to IQ Server for policy evaluation
        username: admin
    # Password to connect to IQ Server for policy evaluation
        password: oyIPVhpYKELG
    # Determines the policy elements (policies, labels, and license threat groups) to associate with this build, and is managed via the Nexus IQ Server.
        applicationId: Nodegoat
    # Controls the stage the policy evaluation will be run against on the Nexus IQ Server.
        stage: # default is Build
    # This is the path to a specific application archive file, a directory containing such archives or the ID of a Docker image. For archives, a number of formats are supported, including jar, war, ear, tar, tar.gz, zip and many others.
        target: package-lock.json
          
